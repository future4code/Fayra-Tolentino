1. Observe a primeira div do HTML, a que tem um id chamado "cadastro". Veja tudo o que tem dentro dela.

<div id='cadastro'>
        <p>Cadastrar Despesa</p>
        <input id="valorCadastro" type="number" placeholder="Valor da Despesa">
        <select id="tipoCadastro">
            <option value="" disabled selected>Selecione um tipo</option>
            <option value="alimenta√ß√£o">Alimenta√ß√£o</option>
            <option value="utilidades">Utilidades</option>
            <option value="viagem">Viagem</option>
        </select>
        <input id="descricaoCadastro" type="text" placeholder="Descri√ß√£o">
        <button onclick="adicionarDespesa()">Adicionar</button>
</div>

A primeira div do c√≥digo vai determinar a primeira se√ß√£o  onde √© poss√≠vel o usu√°rio registrar seus gastos, escolher o tipo de despesa e descr√ß√£o 
dessa despesa. Esses dados poder√£o ser introduzidos quando o usu√°rio clicar o bot√£o, com isso, no clique ser√° ativado a fun√ß√£o adicionarDespesa()

--------------------------------------------------------------------------------------------------------------------------------------

2. √â essa a div respons√°vel por conter os campos de formul√°rio para cadastro de uma nova despesa. Dentro dela, h√° tr√™s campos:

    - um input para que o usu√°rio coloque o valor da despesa
    <input id="valorCadastro" type="number" placeholder="Valor da Despesa">

    - um select para que o usu√°rio escolha o tipo da despesa. Nesse select h√° as op√ß√µes de "Alimenta√ß√£o", "Utilidades" e " Viagens".
    <select id="tipoCadastro">
            <option value="" disabled selected>Selecione um tipo</option>
            <option value="alimenta√ß√£o">Alimenta√ß√£o</option>
            <option value="utilidades">Utilidades</option>
            <option value="viagem">Viagem</option>
        </select>

    - um input para que o usu√°rio coloque uma descri√ß√£o da despesa
    <input id="descricaoCadastro" type="text" placeholder="Descri√ß√£o">

-----------------------------------------------------------------------------------------------------------------------------------------
3. Al√©m disso, ainda dentro da div cadastro, h√° o bot√£o de criar a despesa, chamado "Adicionar". Ele chama, no m√©todo `onclick`,
 a fun√ß√£o `adicionarDespesa()`(n√£o √© necess√°rio ver o que essa fun√ß√£o faz agora, daqui a pouco falaremos sobre ela).

 <button onclick="adicionarDespesa()">Adicionar</button>

-----------------------------------------------------------------------------------------------------------------------------------------
4. Agora, algumas linhas mais abaixo, observe a declara√ß√£o dessa fun√ß√£o imprimirDespesas. L√°, voc√™ vai reparar que, por enquanto, 
essa fun√ß√£o n√£o est√° fazendo nada com o par√¢metro. Daqui a pouco, por√©m, voc√™ ver√° que ela ser√° a respons√°vel por imprimir todas 
as despesas do array na tela, dentro da div "despesas". Isso ser√° feito na parte de implementa√ß√£o de c√≥digo. 

// PRIMEIRO
function imprimirDespesas(despesas){
    let divDespesas = document.getElementById('despesas')
    divDespesas.innerHTML = '<p><u>Despesas Detalhadas</u></p>'

    // AQUI VEM A IMPLEMENTA√á√ÉO
}

------------------------------------------------------------------------------------------------------------------------------------------
5.  Por enquanto, o que voc√™ deve perceber √© que a √∫nica coisa que a fun√ß√£o faz √© pegar a div com id "despesas" do HTML 
(primeira linha da fun√ß√£o), por meio do `getElementById`, e incluir dentro da div, por meio do `innerHTML`, 
uma tag <p> escrita "Despesas Detalhadas".

<div id="despesas"></div>

-------------------------------------------------------------------------------------------------------------------------------------------
6. Volte na terceira linha do c√≥digo. Nela est√° a invoca√ß√£o da fun√ß√£o `imprimirExtrato`.

let arrDespesas = []
imprimirDespesas(arrDespesas)
imprimirExtrato()

-------------------------------------------------------------------------------------------------------------------------------------------
7. Algumas linhas mais abaixo, est√° a declara√ß√£o desse fun√ß√£o. D√™ uma olhada nessa declara√ß√£o.

function imprimirExtrato(){
    let divExtrato = document.getElementById('extrato')
    let gastoTotal = 0
    let gastoAlimentacao = 0
    let gastoUtilidades = 0
    let gastoViagem = 0

-------------------------------------------------------------------------------------------------------------------------------------------
8. Voc√™ vai ver, na parte de implementa√ß√£o de c√≥digo, que essa fun√ß√£o ser√° respons√°vel por pegar o array de despesas da linha 1 do c√≥digo e, 
a partir de verifica√ß√µes de cada tipo de despesa (alimenta√ß√£o, utilidade ou viagem), somar o total separado de cada tipo, al√©m de somar os
 gastos de todas as despesas juntas. O total gasto com alimenta√ß√£o ser√° guardado na vari√°vel `gastoAlimentacao`; o total gasto com utilidades, 
 na vari√°vel `gastoUtilidade`; o total gasto com viagem, na vari√°vel `gastoViagem`; e a soma de todas as despesas, na vari√°vel `gastoTotal`.

 function adicionarDespesa(){
    let valorCdt = document.getElementById('valorCadastro')
    let tipoCtd = document.getElementById('tipoCadastro')
    let descricaoCtd = document.getElementById('descricaoCadastro')

-------------------------------------------------------------------------------------------------------------------------------------------
9. Por enquanto, por√©m, h√° apenas as declara√ß√µes dessas vari√°veis citadas no passo anterior (7), a captura da div com id "extrato" do HTML, 
por meio do `getElementById`, com inclus√£o na div, por meio do `innerHTML`, de uma tag <p> com um texto que identifica todos os 
gastos guardados pelas vari√°veis citadas no passo anterior.

function imprimirExtrato(){
    let divExtrato = document.getElementById('extrato')
    let gastoTotal = 0
    let gastoAlimentacao = 0
    let gastoUtilidades = 0
    let gastoViagem = 0

<div id="extrato"></div>

-------------------------------------------------------------------------------------------------------------------------------------------
10. Depois, vem a fun√ß√£o `limparFiltros`, que √© respons√°vel por limpar os campos da se√ß√£o de "Filtrar Despesa".

<button onclick="limparFiltros()">Limpar</button>

function limparFiltros() {
    document.getElementById('tipoFiltro').value = ""
    document.getElementById('valorFiltroMin').value = ""
    document.getElementById('valorFiltroMax').value = ""
}

-------------------------------------------------------------------------------------------------------------------------------------------
11. Agora, pedimos para que voc√™ d√™ um pulo no final do arquivo js. L√° nas √∫ltimas linhas, h√° tr√™s fun√ß√µes de valida√ß√£o, 
chamadas: `validarValor`, `validarTipo` e `validarDescricao`.

12. N√£o precisa se preocupar em entender como funcionam essas fun√ß√µes. O importante √© apenas voc√™ saber que elas servem para validar
 os campos dos inputs de formul√°rio para cadastrar uma nova despesa.  Elas recebem como par√¢metro os valores dos inputs colocados no 
 cadastro de despesas do HTML e retornam um `true` ou `false`. Se retornar true, √© por que o usu√°rio colocou um campo v√°lido no formul√°rio. 
 Se retornar false, √© pq o usu√°rio colocou um campo inv√°lido, como um n√∫mero negativo ou um campo em branco, por exemplo. Essas tr√™s fun√ß√µes 
 ser√£o chamadas dentro da fun√ß√£o `adicionarDespesa`, que passaremos a explicar a seguir, no pr√≥ximo passo üëá

function validarValor(valor){
    if(valor.value.length > 0 && parseInt(valor.value) > 0){
        return true
    }
    return false
}

function validarTipo(tipo){
    if(tipo.value !== ""){
        return true
    }
    return false
}

function validarDescricao(texto){
    if(texto.value.replace(/ /g,"").length !== 0){
        return true
    }
    return false
}


-------------------------------------------------------------------------------------------------------------------------------------------
13. A fun√ß√£o `adicionarDespesa` √© chamada no clique do bot√£o "Adicionar".

14. Ela √© respons√°vel por criar um objeto com as propriedades de uma despesa (valor, tipo, descricao), a partir do que o 
usu√°rio digitou no formul√°rio, e adicionar esse objeto no array de despesas (`arrDespesas`) da linha 1.

15. Para isso, a fun√ß√£o, primeiro, pega os valores digitados pelo usu√°rio no formul√°rio cadastro de despesas do HTML, 
por meio do `getElementById` (tr√™s primeiras linhas da fun√ß√£o).

<button onclick="adicionarDespesa()">Adicionar</button>

function adicionarDespesa(){
    let valorCdt = document.getElementById('valorCadastro')
    let tipoCtd = document.getElementById('tipoCadastro')
    let descricaoCtd = document.getElementById('descricaoCadastro')

    if(validarValor(valorCdt) && validarTipo(tipoCtd) && validarDescricao(descricaoCtd)){
        let novaDespesa = {
            valor: Number(valorCdt.value),
            tipo: tipoCtd.value,
            descricao: descricaoCtd.value,
        }

        arrDespesas.push(novaDespesa)
        
        valorCdt.value = ""
        tipoCtd.value = ""
        descricaoCtd.value = ""

        
        limparFiltros()
        imprimirDespesas(arrDespesas)
        imprimirExtrato()
    } else {
        alert("`Faltou algum valor ou algum valor √© um n√∫mero negativo`")
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------
16. Depois, h√° a verifica√ß√£o se o usu√°rio digitou valores v√°lidos no form, por meio do `if` com as fun√ß√µes `validarValor`, 
`validarTipo` e `validarDescricao` (explicadas nos passos 9 e 10) nas condicionais do if.

if(validarValor(valorCdt) && validarTipo(tipoCtd) && validarDescricao(descricaoCtd))

-------------------------------------------------------------------------------------------------------------------------------------------
17. Caso o usu√°rio coloque valores v√°lidos no form, a fun√ß√£o entra no if e, nessa ordem: 
    - cria uma vari√°vel chamada `novaDespesa`, que guarda justamente uma nova despesa com as informa√ß√µes do que o 
    usu√°rio preencheu no form;
    - adiciona essa `novaDespesa` no array de despesas (`arrDespesas`) por meio do push;
    - limpa os campos do formul√°rio;
    - chama a fun√ß√£o `limparFiltros` (explicada no passo 9);
    - chama a fun√ß√£o `imprimirDespesas` (explicada nos passos 3 a 5) para atualizar as despesas impressas na div "despesas" 
    do HTML com a nova despesa adicionada;
    - chama a fun√ß√£o `imprimirExtrato` (explicada nos passos 6 a 8) para atualizar o extrato impresso na div "extrato" do 
    HTML com a nova despesa adicionada.

-------------------------------------------------------------------------------------------------------------------------------------------
18. Caso o usu√°rio n√£o coloque valores v√°lidos no form, a fun√ß√£o entra no else e imprime essa frase para o usu√°rio: 
"Faltou algum valor ou algum valor √© um n√∫mero negativo".

 else {
        alert("`Faltou algum valor ou algum valor √© um n√∫mero negativo`")
    }

-------------------------------------------------------------------------------------------------------------------------------------------
19. Por fim, a fun√ß√£o `filtrarDespesas` deveria ser a respons√°vel por pegar os valores da se√ß√£o de filtros, e filtrar as despesas 
que est√£o renderizadas na div "despesas" a partir dos filtros que o usu√°rio preencher.

20. E a gente diz deveria, por que ainda falta uma implementa√ß√£o nela, para que esse filtro funcione. 
Isso, vamos ver na parte de implementa√ß√£o, logo mais abaixo. (falta o filter)

21. Por enquanto, ela apenas est√° usando o `getElementById` em cada input de filtro para pegar os valores colocados pelo usu√°rio.

function filtrarDespesas(){
    let tipoFiltro = document.getElementById('tipoFiltro').value
    let valorMin = Number(document.getElementById('valorFiltroMin').value)
    let valorMax = Number(document.getElementById('valorFiltroMax').value)


    let despesasFiltradas // AQUI NESSA VARI√ÅVEL VEM A IMPLEMENTA√á√ÉO

    imprimirDespesas(despesasFiltradas)
}

<div id="despesas"></div>

--------------------------------------------------------------------------------------------------------------------------------------------






